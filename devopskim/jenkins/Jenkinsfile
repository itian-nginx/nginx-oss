pipeline {
    agent any

    environment {
        NGINX_SERVER = '192.168.201.93'
        SSH_PORT = '22'
        SSH_USER = 'root'
        DEPLOY_PATH = '/etc/nginx/conf.d/'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', credentialsId: 'git-credential', url: 'https://github.com/itian-nginx/nginx-oss.git'
            }
        }
        stage('NGINX Conf Validate') {
            steps {
                dir('devopskim/jenkins') { // 작업 디렉토리를 devopskim/jenkins/로 변경
                    sh '''
                    # Test NGINX configuration locally
                    docker run -i -d -p 80:80 --name=test-nginx nginx nginx -g "daemon off;"
                    docker exec test-nginx mkdir /var/log/nginx/access
                    docker exec test-nginx mkdir /var/log/nginx/error
                    docker cp default.conf test-nginx:/etc/nginx/conf.d/default.conf
                    docker exec test-nginx cat /etc/nginx/conf.d/default.conf

                    # Validate configuration
                    docker exec test-nginx nginx -t || (docker rm -f test-nginx && exit 1)

                    # Clean up after validation
                    docker rm -f test-nginx
                    '''
                }
            }
        }
        stage('Configuration Copy') {
            steps {
                dir('devopskim/jenkins') { // 작업 디렉토리를 devopskim/jenkins/로 변경
                    sshagent(['itian-nginx1-ssh']) {
                        sh '''
                        scp -P ${SSH_PORT} -o StrictHostKeyChecking=no default.conf ${SSH_USER}@${NGINX_SERVER}:${DEPLOY_PATH}
                        scp -P ${SSH_PORT} -o StrictHostKeyChecking=no change-index.html ${SSH_USER}@${NGINX_SERVER}:/usr/share/nginx/html/
                        '''
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                sshagent(['itian-nginx1-ssh']) {
                    sh '''
                    ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no ${SSH_USER}@${NGINX_SERVER} "nginx -t"
                    ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no ${SSH_USER}@${NGINX_SERVER} "nginx -s reload"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
